name: release-android-base

permissions:
  id-token: write
  contents: read

on:
  workflow_call:
    inputs:
      name:
        description: 'Name of the project'
        required: true
        type: string
      root-path:
        description: 'Path of the react-native project'
        required: true
        type: string
      release-type:
        description: 'Release type of the project (debug/internal/production)'
        default: 'internal'
        type: string
      project-type:
        description: 'Type of project (wallet/dapp)'
        required: true
        type: string
      output-path:
        description: 'Path to get the APK file'
        required: true
        type: string
      env-file-path:
        description: "Path + name of the env file"
        required: false
        type: string
      upload-to-bucket:
        description: "Upload to S3"
        required: false
        default: false
        type: boolean
    secrets:
      project-id:
        description: 'Reown Cloud ID'
        required: true
      firebase-app-id:
        required: true
      gsa-key:
        required: true
      relay-url:
        description: 'Relay URL'
        required: false
      sentry-dsn:
        required: false
      sentry-file:
        required: true
      secrets-file:
        required: true
      keystore-name:
        required: true
      keystore:
        required: true
      google-services-file:
        required: false
      aws-account-id:
        required: false
      slack-webhook-url:
        required: true
      firebase-url:
        description: 'Firebase URL of the project'
        required: false
      env-file:
        required: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup
        uses: ./.github/actions/ci-setup
        with:
          root-path: ${{ inputs.root-path }}

      - name: Install Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'
          architecture: x86_64

      # Create env file
      - name: Create env file
        run: |
          if [ -n "${{ secrets.env-file }}" ] && [ -n "${{ inputs.env-file-path }}" ]; then
            echo "${{ secrets.env-file }}" > ${{ inputs.env-file-path }}
          else
            touch ${{ inputs.root-path }}/.env.${{ inputs.release-type }}
            echo -e "ENV_PROJECT_ID=${{ secrets.project-id }}\nENV_RELAY_URL=${{ secrets.relay-url }}\nENV_SENTRY_DSN=${{ secrets.sentry-dsn }}\nENV_SENTRY_TAG=${{ inputs.release-type }}" >> ${{ inputs.root-path }}/.env.${{ inputs.release-type }}
          fi
      
      - name: Add Sentry file
        run: touch ${{ inputs.root-path }}/android/sentry.properties && echo "${{ secrets.sentry-file }}" >> ${{ inputs.root-path }}/android/sentry.properties

      - name: Add Secrets file
        run: touch ${{ inputs.root-path }}/android/secrets.properties && echo "${{ secrets.secrets-file }}" >> ${{ inputs.root-path }}/android/secrets.properties

      - name: Add Keystore file
        run: echo ${{ secrets.keystore }} | base64 --decode >> ${{ inputs.root-path }}/android/app/${{ secrets.keystore-name }}.keystore

      # Add Google Services file -> to create it run: base64 -i path/to/GoogleService-Info.plist
      - name: Add Google Services file
        env:
          google-services-file: ${{ secrets.google-services-file }}
        if: ${{ env.google-services-file != '' }}
        run: echo ${{ env.google-services-file }} | base64 --decode >> ${{ inputs.root-path }}/android/app/google-services.json

      - name: Optimize Gradle for CI
        run: |
          echo "org.gradle.jvmargs=-Xmx4096m -XX:MaxMetaspaceSize=1024m" >> ${{ inputs.root-path }}/android/gradle.properties
          echo "org.gradle.parallel=true" >> ${{ inputs.root-path }}/android/gradle.properties
          echo "org.gradle.caching=true" >> ${{ inputs.root-path }}/android/gradle.properties

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ${{ inputs.root-path }}/android/.gradle
          key: ${{ runner.os }}-gradle-${{ inputs.name }}-${{ hashFiles(format('{0}/android/**/*.gradle*', inputs.root-path), format('{0}/android/**/gradle-wrapper.properties', inputs.root-path)) }}
          restore-keys: |
            ${{ runner.os }}-gradle-${{ inputs.name }}-

      - name: Build APK
        id: build
        run: |
          if [ ${{ inputs.release-type }} = 'internal' ]; then
            cd ${{ inputs.root-path }} && yarn install && yarn run android:build:internal
          else
            cd ${{ inputs.root-path }} && yarn install && yarn run android:build
          fi
  
      - name: Setup Firebase
        uses: w9jds/setup-firebase@main
        with:
          tools-version: 13.0.1
          gcp_sa_key: ${{ secrets.gsa-key }}
      
      - name: Upload APK to Firebase
        id: firebase-upload
        continue-on-error: false
        env:
          APP_ID: ${{ secrets.firebase-app-id }}
        run: |
          firebase appdistribution:distribute ${{ inputs.output-path }} \
            --app $APP_ID \
            --release-notes "${{ inputs.name }} (${{ inputs.project-type }}) - ${{ inputs.release-type }} - Branch: ${{ github.ref_name }}" \
            --groups "flutter-team, javascript-team, kotlin-team, unity, rust-team, swift-team, wc-testers"
    
      - name: Configure AWS credentials
        id: aws-creds
        if: ${{ inputs.upload-to-bucket == true }}
        continue-on-error: true
        uses: aws-actions/configure-aws-credentials@00943011d9042930efac3dcd3a170e4273319bc8
        with:
          role-to-assume: arn:aws:iam::${{ secrets.aws-account-id }}:role/prod-github-actions-react-native-builds
          aws-region: eu-central-1
          output-env-credentials: false
          output-credentials: true

      - name: Upload Android build to S3
        id: s3-upload
        if: ${{ inputs.upload-to-bucket == true }}
        env:
          AWS_REGION: eu-central-1
          AWS_ACCESS_KEY_ID: ${{ steps.aws-creds.outputs.aws-access-key-id }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.aws-creds.outputs.aws-secret-access-key }}
          AWS_SESSION_TOKEN: ${{ steps.aws-creds.outputs.aws-session-token }}
        continue-on-error: true
        run: |
          aws s3 cp \
            ${{ inputs.output-path }} \
            s3://walletconnect.react-native-builds.prod/android/${{ inputs.release-type }}/${{ inputs.project-type }}-${{ inputs.release-type }}.apk

      - name: Send Slack notification
        if: always() && !cancelled()
        uses: slackapi/slack-github-action@v2.1.0
        with:
          webhook: ${{ secrets.slack-webhook-url }}
          webhook-type: incoming-webhook
          payload: |
            {
              "text": "Android Build Report - ${{ inputs.name }} - ${{ inputs.release-type }}",
              "blocks": [
                {
                  "type": "header",
                  "text": { "type": "plain_text", "text": "ü§ñ Android Build Report" }
                },
                {
                  "type": "section",
                  "fields": [
                    { "type": "mrkdwn", "text": "*Project:*\n`${{ inputs.name }}`" },
                    { "type": "mrkdwn", "text": "*Release Type:*\n`${{ inputs.release-type }}`" },
                    { "type": "mrkdwn", "text": "*Branch:*\n`${{ github.ref_name }}`" }
                  ]
                },
                {
                  "type": "section",
                  "fields": [
                    { "type": "mrkdwn", "text": "*Build:*\n`${{ steps.build.outcome == 'success' && '‚úÖ Success' || '‚ùå Failed' }}`" },
                    { "type": "mrkdwn", "text": "*Firebase Upload:*\n`${{ steps.firebase-upload.outcome == 'success' && '‚úÖ Success' || steps.firebase-upload.outcome == 'failure' && '‚ùå Failed' || '‚è≠Ô∏è Skipped' }}`" },
                    { "type": "mrkdwn", "text": "*S3 Upload:*\n`${{ steps.s3-upload.outcome == 'success' && '‚úÖ Success' || steps.s3-upload.outcome == 'failure' && '‚ùå Failed' || '‚è≠Ô∏è Skipped' }}`" },
                    { "type": "mrkdwn", "text": "*Overall Status:*\n`${{ job.status == 'success' && '‚úÖ Success' || '‚ùå Failed' }}`" }
                  ]
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": { "type": "plain_text", "text": "View Workflow Run" },
                      "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    }${{ steps.build.outcome == 'success' && steps.firebase-upload.outcome == 'success' && secrets.firebase-url != '' && format(',{{"type":"button","text":{{"type":"plain_text","text":"View in Firebase"}},"url":"{0}"}}', secrets.firebase-url) || '' }}
                  ]
                }
              ]
            }